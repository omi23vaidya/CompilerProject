/* *
 * Scanner for the class project in COP5556 Programming Language Principles
 * at the University of Florida, Fall 2017.
 *
 * This software is solely for the educational benefit of students
 * enrolled in the course during the Fall 2017 semester.
 *
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 *
 *  @Beverly A. Sanders, 2017
  */

package cop5556fa17;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Scanner {

	@SuppressWarnings("serial")
	public static class LexicalException extends Exception {

		int pos;

		public LexicalException(String message, int pos) {
			super(message);
			this.pos = pos;
		}

		public int getPos() { return pos; }

	}

	public static enum Kind {
		IDENTIFIER, INTEGER_LITERAL, BOOLEAN_LITERAL, STRING_LITERAL,
		KW_x/* x */, KW_X/* X */, KW_y/* y */, KW_Y/* Y */, KW_r/* r */, KW_R/* R */, KW_a/* a */,
		KW_A/* A */, KW_Z/* Z */, KW_DEF_X/* DEF_X */, KW_DEF_Y/* DEF_Y */, KW_SCREEN/* SCREEN */,
		KW_cart_x/* cart_x */, KW_cart_y/* cart_y */, KW_polar_a/* polar_a */, KW_polar_r/* polar_r */,
		KW_abs/* abs */, KW_sin/* sin */, KW_cos/* cos */, KW_atan/* atan */, KW_log/* log */,
		KW_image/* image */,  KW_int/* int */,
		KW_boolean/* boolean */, KW_url/* url */, KW_file/* file */, OP_ASSIGN/* = */, OP_GT/* > */, OP_LT/* < */,
		OP_EXCL/* ! */, OP_Q/* ? */, OP_COLON/* : */, OP_EQ/* == */, OP_NEQ/* != */, OP_GE/* >= */, OP_LE/* <= */,
		OP_AND/* & */, OP_OR/* | */, OP_PLUS/* + */, OP_MINUS/* - */, OP_TIMES/* * */, OP_DIV/* / */, OP_MOD/* % */,
		OP_POWER/* ** */, OP_AT/* @ */, OP_RARROW/* -> */, OP_LARROW/* <- */, LPAREN/* ( */, RPAREN/* ) */,
		LSQUARE/* [ */, RSQUARE/* ] */, SEMI/* ; */, COMMA/* , */, EOF;
	}

	public static enum State{
		START, IN_DIGIT, IN_IDENT, AFTER_EQ;
	}

	/** Class to represent Tokens.
	 *
	 * This is defined as a (non-static) inner class
	 * which means that each Token instance is associated with a specific
	 * Scanner instance.  We use this when some token methods access the
	 * chars array in the associated Scanner.
	 *
	 *
	 * @author Beverly Sanders
	 *
	 */
	public class Token {
		public final Kind kind;
		public final int pos;
		public final int length;
		public final int line;
		public final int pos_in_line;

		public Token(Kind kind, int pos, int length, int line, int pos_in_line) {
			super();
			this.kind = kind;
			this.pos = pos;
			this.length = length;
			this.line = line;
			this.pos_in_line = pos_in_line;
		}

		public String getText() {
			if (kind == Kind.STRING_LITERAL) {
				return chars2String(chars, pos, length);
			}
			else return String.copyValueOf(chars, pos, length);
		}

		/**
		 * To get the text of a StringLiteral, we need to remove the
		 * enclosing " characters and convert escaped characters to
		 * the represented character.  For example the two characters \ t
		 * in the char array should be converted to a single tab character in
		 * the returned String
		 *
		 * @param chars
		 * @param pos
		 * @param length
		 * @return
		 */
		private String chars2String(char[] chars, int pos, int length) {
			StringBuilder sb = new StringBuilder();
			for (int i = pos + 1; i < pos + length - 1; ++i) {// omit initial and final "
				char ch = chars[i];
				if (ch == '\\') { // handle escape
					i++;
					ch = chars[i];
					switch (ch) {
					case 'b':
						sb.append('\b');
						break;
					case 't':
						sb.append('\t');
						break;
					case 'f':
						sb.append('\f');
						break;
					case 'r':
						sb.append('\r'); //for completeness, line termination chars not allowed in String literals
						break;
					case 'n':
						sb.append('\n'); //for completeness, line termination chars not allowed in String literals
						break;
					case '\"':
						sb.append('\"');
						break;
					case '\'':
						sb.append('\'');
						break;
					case '\\':
						sb.append('\\');
						break;
					default:
						assert false;
						break;
					}
				} else {
					sb.append(ch);
				}
			}
			return sb.toString();
		}

		/**
		 * precondition:  This Token is an INTEGER_LITERAL
		 *
		 * @returns the integer value represented by the token
		 */
		public int intVal() {
			assert kind == Kind.INTEGER_LITERAL;
			return Integer.valueOf(String.copyValueOf(chars, pos, length));
		}

		public String toString() {
			return "[" + kind + "," + String.copyValueOf(chars, pos, length)  + "," + pos + "," + length + "," + line + ","
					+ pos_in_line + "]";
		}

		/**
		 * Since we overrode equals, we need to override hashCode.
		 * https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-
		 *
		 * Both the equals and hashCode method were generated by eclipse
		 *
		 */
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + ((kind == null) ? 0 : kind.hashCode());
			result = prime * result + length;
			result = prime * result + line;
			result = prime * result + pos;
			result = prime * result + pos_in_line;
			return result;
		}

		/**
		 * Override equals method to return true if other object
		 * is the same class and all fields are equal.
		 *
		 * Overriding this creates an obligation to override hashCode.
		 *
		 * Both hashCode and equals were generated by eclipse.
		 *
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Token other = (Token) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (kind != other.kind)
				return false;
			if (length != other.length)
				return false;
			if (line != other.line)
				return false;
			if (pos != other.pos)
				return false;
			if (pos_in_line != other.pos_in_line)
				return false;
			return true;
		}

		/**
		 * used in equals to get the Scanner object this Token is
		 * associated with.
		 * @return
		 */
		private Scanner getOuterType() {
			return Scanner.this;
		}

	}

	/**
	 * Extra character added to the end of the input characters to simplify the
	 * Scanner.
	 */
	static final char EOFchar = 0;

	/**
	 * The list of tokens created by the scan method.
	 */
	final ArrayList<Token> tokens;

	/**
	 * An array of characters representing the input.  These are the characters
	 * from the input string plus and additional EOFchar at the end.
	 */
	final char[] chars;




	/**
	 * position of the next token to be returned by a call to nextToken
	 */
	private int nextTokenPos = 0;

	Scanner(String inputString) {
		int numChars = inputString.length();
		this.chars = Arrays.copyOf(inputString.toCharArray(), numChars + 1); // input string terminated with null char
		chars[numChars] = EOFchar;
		tokens = new ArrayList<Token>();
	}


	/**
	 * Method to scan the input and create a list of Tokens.
	 *
	 * If an error is encountered during scanning, throw a LexicalException.
	 *
	 * @return
	 * @throws LexicalException
	 */
	public Scanner scan() throws LexicalException {
		/* TODO  Replace this with a correct and complete implementation!!! */

		Map<String, Kind> enumMap = new HashMap<String, Kind>();
		enumMap.put("x", Kind.KW_x);
		enumMap.put("X", Kind.KW_X);
		enumMap.put("y", Kind.KW_y);
		enumMap.put("Y", Kind.KW_Y);
		enumMap.put("r", Kind.KW_r);
		enumMap.put("R", Kind.KW_R);
		enumMap.put("a", Kind.KW_a);
		enumMap.put("A", Kind.KW_A);
		enumMap.put("Z", Kind.KW_Z);
		enumMap.put("DEF_X", Kind.KW_DEF_X);
		enumMap.put("DEF_Y", Kind.KW_DEF_Y);
		enumMap.put("SCREEN", Kind.KW_SCREEN);
		enumMap.put("cart_x", Kind.KW_cart_x);
		enumMap.put("cart_y", Kind.KW_cart_y);
		enumMap.put("polar_a", Kind.KW_polar_a);
		enumMap.put("polar_r", Kind.KW_polar_r);
		enumMap.put("abs", Kind.KW_abs);
		enumMap.put("sin", Kind.KW_sin);
		enumMap.put("cos", Kind.KW_cos);
		enumMap.put("atan", Kind.KW_atan);
		enumMap.put("log", Kind.KW_log);
		enumMap.put("image", Kind.KW_image);
		enumMap.put("int", Kind.KW_int);
		enumMap.put("boolean", Kind.KW_boolean);
		enumMap.put("url", Kind.KW_url);
		enumMap.put("file", Kind.KW_file);


		int pos = 0;
		State state = State.START;
		int line = 1;
		int posInLine = 1;
		int startPos = 0;
		int tokenStart = 1;
		while(pos < chars.length)
		{
			char ch = chars[pos];
			switch(state)
			{
			case START: {
				ch = chars[pos];
				startPos = pos;
				tokenStart = posInLine;
				switch(ch){
				case '+': {
					tokens.add(new Token(Kind.OP_PLUS, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
					}
				break;

				case '-':{
					if(chars[pos+1] == '>' && (pos+1) < chars.length)
					{
					tokens.add(new Token(Kind.OP_RARROW, startPos, 2, line, tokenStart));
					posInLine++;
					pos++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_MINUS, startPos, 1, line, tokenStart));
					}
					posInLine++;
					pos++;
				}
				break;

				case '*':{
					tokenStart = posInLine;
					if(chars[pos+1] == '*' && (pos+1) < chars.length)
					{
						tokens.add(new Token(Kind.OP_POWER, startPos, 2, line, tokenStart));
						pos++;
						posInLine++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_TIMES, startPos, 1, line, tokenStart));
					}

					posInLine++;
					pos++;
				}
				break;

				case '%':{
					tokens.add(new Token(Kind.OP_MOD, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '/':{
					if((pos+1) < chars.length-1 && chars[pos+1] == '/' )
					{
						pos++;
						posInLine++;
						while((pos<chars.length-1) && (chars[pos] != '\n' && chars[pos] != '\r' ))
						{
							pos++;
							posInLine++;
						}
						if(pos<chars.length-1 && (chars[pos] == '\n' || chars[pos] == '\r'))
						{
							if((pos+1) < chars.length-1 && chars[pos] == '\r' && chars[pos+1] == '\n')
							{
								pos++;
							} else {;}
							pos++;
							line++;
							posInLine = 1;
						} else {;}
					}
					else
					{
						tokens.add(new Token(Kind.OP_DIV, startPos, 1, line, tokenStart));
						posInLine++;
						pos++;
					}

				}
				break;

				case '=':{
					state = State.AFTER_EQ;
					posInLine++;
					pos++;
				}
				break;

				case '0':{
					tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case ';' :{
					tokens.add(new Token(Kind.SEMI, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				} break;

				case '\n': {
					pos++;
					line++;
					posInLine = 1;
				} break;

				case '\r': {
					pos++;
					line++;
					posInLine = 1;
					if(chars[pos] == '\n')
					{
						pos++;
					}
				} break;

				case EOFchar:{
					pos++; //next iteration should terminate loop
					//posInLine++;
				}
				break;

				case '>':{
					tokenStart = posInLine;
					if(chars[pos+1] == '=' && (pos+1) < chars.length)
					{
						tokens.add(new Token(Kind.OP_GE, startPos, 2, line, tokenStart));
						pos++;
						posInLine++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_GT, startPos, 1, line, tokenStart));
					}

					posInLine++;
					pos++;
				}
				break;
//
				case '<':{
					tokenStart = posInLine;
					if(chars[pos+1] == '=' && (pos+1) < chars.length)
					{
						tokens.add(new Token(Kind.OP_LE, startPos, 2, line, tokenStart));
						pos++;
						posInLine++;
					}
					else if(chars[pos+1] == '-' && (pos+1) < chars.length)
					{
						tokens.add(new Token(Kind.OP_LARROW, startPos, 2, line, tokenStart));
						pos++;
						posInLine++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_LT, startPos, 1, line, tokenStart));
					}

					posInLine++;
					pos++;
				}
				break;

				case '!':{
					tokenStart = posInLine;
					if(chars[pos+1] == '=')
					{
						tokens.add(new Token(Kind.OP_NEQ, startPos, 2, line, tokenStart));
						pos++;
						posInLine++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_EXCL, startPos, 1, line, tokenStart));
					}

					posInLine++;
					pos++;
				}
				break;

				case '?':{
					tokens.add(new Token(Kind.OP_Q, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case ':':{
					tokens.add(new Token(Kind.OP_COLON, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '&':{
					tokens.add(new Token(Kind.OP_AND, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '|':{
					tokens.add(new Token(Kind.OP_OR, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '@':{
					tokens.add(new Token(Kind.OP_AT, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '(':{
					tokens.add(new Token(Kind.LPAREN, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case ')':{
					tokens.add(new Token(Kind.RPAREN, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '[':{
					tokens.add(new Token(Kind.LSQUARE, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case ']':{
					tokens.add(new Token(Kind.RSQUARE, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case ',':{
					tokens.add(new Token(Kind.COMMA, startPos, 1, line, tokenStart));
					posInLine++;
					pos++;
				}
				break;

				case '"':{
					pos++;
					posInLine++;
					int stringStartPos = pos;
					while((pos) < chars.length-1 && chars[(pos)] != '"')
					{
						if((chars[pos] == '\\')){
							if((pos+1) < chars.length &&
									(chars[pos+1] != 'b'
									&& chars[pos+1] != 't'
									&& chars[pos+1] != 'n'
									&& chars[pos+1] != 'f'
									&& chars[pos+1] != '"'
									&& chars[pos+1]	!= 'r'
									&& chars[pos+1] != '\''
									&& chars[pos+1] != '\\'))
							{
								throw new LexicalException("Incorrect character after backslash", pos+1);
							}
							else
							{
								pos++;
								posInLine++;
							}

						}

						if(chars[pos] == '\n' || chars[pos] == '\r')
						{
							throw new LexicalException("Line terminator encountered in string", pos);
						} else {
							;
						}
						if((pos+1) < chars.length && chars[pos] == '\r' && chars[pos+1] == '\n')
						{
							throw new LexicalException("Line terminator encountered in string", pos);
						} else {
							;
						}

						pos++;
						posInLine++;

					}
					if(chars[pos] != '"')
					{
						throw new LexicalException("String literal not closed", pos);
					}
					String strLiteral = new String(chars, stringStartPos, pos - stringStartPos);
					tokens.add(new Token(Kind.STRING_LITERAL, startPos, strLiteral.length()+2, line, tokenStart));
					pos++;
					posInLine++;
				} break;

				default: {
					if(Character.isDigit(ch))
					{
						if((pos+1) < chars.length && Character.isDigit(chars[pos+1]))
						{
							state = State.IN_DIGIT;
							pos++;
							//tokenStart = posInLine;
							posInLine++;
						}
						else
						{
							tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, 1, line, posInLine));
							pos++;
							posInLine++;
						}
					}//if ends
					//else if(Character.isJavaIdentifierStart(ch))
					else if((ch>='a' && ch<='z')
							|| (ch>='A' && ch<='Z')
							|| ch == '$'
							|| ch == '_')
					{
						if(chars[pos] == 't'
								&& chars[pos+1] == 'r'
								&& chars[pos+2] == 'u'
								&& chars[pos+3] == 'e'
								&& (pos+4) < chars.length
								&& !(Character.isLetterOrDigit(chars[pos+4]))
								&& chars[pos+4] != '$'
								&& chars[pos+4] != '_')
						{
							tokens.add(new Token(Kind.BOOLEAN_LITERAL, startPos, 4, line, tokenStart));
							pos = pos + 3; //because we are incrementing pos at the end by one
							posInLine = posInLine + 3;
						}
						else if((pos+5) < chars.length
								&& chars[pos] == 'f'
								&& chars[pos+1] == 'a'
								&& chars[pos+2] == 'l'
								&& chars[pos+3] == 's'
								&& chars[pos+4] == 'e'
								&& !(Character.isLetterOrDigit(chars[pos+5]))
								&& chars[pos+5] != '$'
								&& chars[pos+5] != '_')
						{
							tokens.add(new Token(Kind.BOOLEAN_LITERAL, startPos, 5, line, tokenStart));
							pos = pos + 4; //because we are incrementing pos at the end by one
							posInLine = posInLine + 4;
						}
						//tokenStart = posInLine;
						else if((chars[pos+1]>='a' && chars[pos+1]<='z')
								|| (chars[pos+1]>='A' && chars[pos+1]<='Z')
								|| Character.isDigit(chars[pos+1])
								|| chars[pos+1] == '$'
								|| chars[pos+1] == '_')
						{
							state = State.IN_IDENT;
						}
						else if(enumMap.containsKey(String.valueOf(ch)))
						{
							tokens.add(new Token(enumMap.get(String.valueOf(ch)), startPos, 1, line, tokenStart));
							state = State.START;
						}
						else
						{
							tokens.add(new Token(Kind.IDENTIFIER, startPos, 1, line, tokenStart));
							state = State.START;
						}
						pos++;
						//tokenStart = posInLine;
						posInLine++;
					}
					else if(Character.isWhitespace(ch))
					{
						pos++;
						posInLine++;
					}
					else
					{
						throw new LexicalException("Cannot recognize the character...", pos);
					}
				} // default ends

				} // switch of START state ends

			} break; //case START
			case IN_DIGIT: {
				if(Character.isDigit(ch))
				{
					pos++;
					posInLine++;
				}
				else {
					try{
					String integerObtained = new String(chars, startPos, pos-startPos);
					if(Integer.parseInt(integerObtained) <= Integer.MAX_VALUE || Integer.parseInt(integerObtained) > Integer.MIN_VALUE )
					{
						tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, pos-startPos, line, tokenStart));
						state = State.START;
						//pos++;
						//posInLine++;
					}
					}
					catch(NumberFormatException ex)
					{
						throw new LexicalException("Integer is out of range.", pos);
					}
				}
			} break;
			case IN_IDENT: {
				if(ch == '\n' || ch == '\r' || (ch == '\r' && chars[pos+1] == '\n'))
				{
					String check_KW = new String(chars, startPos, pos-startPos);
					if(enumMap.containsKey(check_KW))
					{
						tokens.add(new Token(enumMap.get(check_KW), startPos, pos-startPos, line, tokenStart));
						state = State.START;
					}
					else
					{
						tokens.add(new Token(Kind.IDENTIFIER, startPos, pos-startPos, line, tokenStart));
						state = State.START;
					}
					if(chars[pos+1] == '\n' && (pos+1) < chars.length)
					{
						pos++;
					}
					line++;
					pos++;
					posInLine=1;
				}
				else if((ch>='a' && ch<='z') || (ch>='A' && ch<='Z') || ch == '$' || ch == '_' || Character.isDigit(ch))
				{
					pos++;
					posInLine++;
				}
				else
				{
					String check_KW = new String(chars, startPos, pos-startPos);
					if(enumMap.containsKey(check_KW))
					{
						tokens.add(new Token(enumMap.get(check_KW), startPos, pos-startPos, line, tokenStart));
					}
					else
					{
						tokens.add(new Token(Kind.IDENTIFIER, startPos, pos-startPos, line, tokenStart));
					}
					state = State.START;
					//pos++;
					//posInLine++;
				}
			} break;
			case AFTER_EQ: {
				if(ch == '=')
				{
					tokens.add(new Token(Kind.OP_EQ, startPos, 2, line, tokenStart));
					state = State.START;
					pos++;
					posInLine++;
				}
				else
				{
					//if(Character.isJavaIdentifierStart(ch) || Character.isDigit(ch))
					//{
						tokens.add(new Token(Kind.OP_ASSIGN, startPos, 1, line, tokenStart));
						state = State.START;
						//pos++; //remove this
						//posInLine++; //remove this
					//}
				}
			} break;
			default: throw new LexicalException("Kuch toh jhol hai bhai...", pos);
			}//switch(state)
		}// while
		tokens.add(new Token(Kind.EOF, chars.length-1, 0, line, posInLine));
		return this;

	}


	/**
	 * Returns true if the internal iterator has more Tokens
	 *
	 * @return
	 */
	public boolean hasTokens() {
		return nextTokenPos < tokens.size();
	}

	/**
	 * Returns the next Token and updates the internal iterator so that
	 * the next call to nextToken will return the next token in the list.
	 *
	 * It is the callers responsibility to ensure that there is another Token.
	 *
	 * Precondition:  hasTokens()
	 * @return
	 */
	public Token nextToken() {
		return tokens.get(nextTokenPos++);
	}

	/**
	 * Returns the next Token, but does not update the internal iterator.
	 * This means that the next call to nextToken or peek will return the
	 * same Token as returned by this methods.
	 *
	 * It is the callers responsibility to ensure that there is another Token.
	 *
	 * Precondition:  hasTokens()
	 *
	 * @return next Token.
	 */
	public Token peek() {
		return tokens.get(nextTokenPos);
	}


	/**
	 * Resets the internal iterator so that the next call to peek or nextToken
	 * will return the first Token.
	 */
	public void reset() {
		nextTokenPos = 0;
	}

	/**
	 * Returns a String representation of the list of Tokens
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Tokens:\n");
		for (int i = 0; i < tokens.size(); i++) {
			sb.append(tokens.get(i)).append('\n');
		}
		return sb.toString();
	}

}
